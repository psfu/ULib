<!--#declaration
#include <ulib/json/value.h>

/**
 * {
 * "user": "doctoravatar@penzance.com",
 * "forecast": 7,
 * "t": "vlIj",
 * "zip": 94089
 * }
 */

class Request {
public:
   // Check for memory error
   U_MEMORY_TEST

   // Allocator e Deallocator
   U_MEMORY_ALLOCATOR
   U_MEMORY_DEALLOCATOR

   UString user, t;
   uint32_t forecast, zip;

   Request()
      {
      U_TRACE_CTOR(5, Request, "")
      }

   Request(const Request& r) : user(r.user), t(r.t)
      {
      U_TRACE_CTOR(5, Request, "%p", &r)

      U_MEMORY_TEST_COPY(r)

      forecast = r.forecast;
           zip = r.zip;
      }

   ~Request()
      {
      U_TRACE_DTOR(5, Request)
      }

   void clear()
      {
      U_TRACE_NO_PARAM(0, "Request::clear()")

      user.clear();
       t.clear();

      forecast = zip = 0;
      }

   void toJSON(UString& json)
      {
      U_TRACE(0, "Request::toJSON(%V)", json.rep)

      json.toJSON(U_JSON_METHOD_HANDLER(user,     UString));
      json.toJSON(U_JSON_METHOD_HANDLER(t,        UString));
      json.toJSON(U_JSON_METHOD_HANDLER(forecast, uint32_t));
      json.toJSON(U_JSON_METHOD_HANDLER(zip,      uint32_t));
      }

   void toJSON()
      {
      U_TRACE_NO_PARAM(0, "Request::toJSON()")

      U_JSON_TYPE_HANDLER(user,     UString);
      U_JSON_TYPE_HANDLER(t,        UString);
      U_JSON_TYPE_HANDLER(forecast, uint32_t);
      U_JSON_TYPE_HANDLER(zip,      uint32_t);
      }

   void fromJSON(UValue& json)
      {
      U_TRACE(0, "Request::fromJSON(%p)", &json)

      json.fromJSON(U_JSON_METHOD_HANDLER(user,     UString));
      json.fromJSON(U_JSON_METHOD_HANDLER(t,        UString));
      json.fromJSON(U_JSON_METHOD_HANDLER(forecast, uint32_t));
      json.fromJSON(U_JSON_METHOD_HANDLER(zip,      uint32_t));
      }

#ifdef DEBUG
   const char* dump(bool breset) const
      {
      *UObjectIO::os << "zip           " << zip          << '\n'
                     << "forecast      " << forecast     << '\n'
                     << "t    (UString " << (void*)&t    << ")\n"
                     << "user (UString " << (void*)&user << ')';

      if (breset)
         {
         UObjectIO::output();

         return UObjectIO::buffer_output;
         }

      return U_NULLPTR;
      }
#endif

private:
   Request& operator=(const Request&) { return *this; }
};
-->
<!--#header
Content-Type: application/jsonrequest
-->
<!--#code
if (U_HTTP_CTYPE_MEMEQ("application/jsonrequest"))
   {
   Request request;

   if (USP_JSON_REQUEST_PARSE(request)) USP_OBJ_JSON_stringify(request);
   else                                 USP_PUTS_CONSTANT("{}");
   }
-->
